{"componentChunkName":"component---src-rocketseat-gatsby-theme-docs-src-templates-docs-query-js","path":"/usage/configuration/","result":{"data":{"mdx":{"id":"07497eaf-eb23-5f9c-9713-c8f15e86777a","excerpt":"The config file has lower priority than command-line options. If the same bool/string/int option is provided on the command-line\nand in the config file, theâ€¦","fields":{"slug":"/usage/configuration/"},"frontmatter":{"title":"Configuration","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Configuration\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The config file has lower priority than command-line options. If the same bool/string/int option is provided on the command-line\\nand in the config file, the option from command-line will be used.\\nSlice options (e.g. list of enabled/disabled linters) are combined from the command-line and config file.\"), mdx(\"p\", null, \"To see a list of linters enabled by your configuration use:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint linters\\n\")), mdx(\"h2\", {\n    \"id\": \"config-file\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#config-file\",\n    \"aria-label\": \"config file permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Config File\"), mdx(\"p\", null, \"GolangCI-Lint looks for config files in the following paths from the current working directory:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".golangci.yml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".golangci.yaml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".golangci.toml\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".golangci.json\"))), mdx(\"p\", null, \"GolangCI-Lint also searches for config files in all directories from the directory of the first analyzed path up to the root.\\nIf no configuration file has been found, GolangCI-Lint will try to find one in your home directory.\\nTo see which config file is being used and where it was sourced from run golangci-lint with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-v\"), \" option.\"), mdx(\"p\", null, \"Config options inside the file are identical to command-line options.\\nYou can configure specific linters' options only within the config file (not the command-line).\"), mdx(\"p\", null, \"There is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/golangci/golangci-lint/blob/master/.golangci.reference.yml\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \".golangci.reference.yml\")), \" file with all supported options, their description, and default values.\\nThis file is neither a working example nor a recommended configuration, it's just a reference to display all the configuration options.\"), mdx(\"p\", null, \"The configuration file can be validated with the JSON Schema: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://golangci-lint.run/jsonschema/golangci.jsonschema.json\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"https://golangci-lint.run/jsonschema/golangci.jsonschema.json\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"# Options for analysis running.\\nrun:\\n  # See the dedicated \\\"run\\\" documentation section.\\n  option: value\\n# output configuration options\\noutput:\\n  # See the dedicated \\\"output\\\" documentation section.\\n  option: value\\n# All available settings of specific linters.\\nlinters-settings:\\n  # See the dedicated \\\"linters-settings\\\" documentation section.\\n  option: value\\nlinters:\\n  # See the dedicated \\\"linters\\\" documentation section.\\n  option: value\\nissues:\\n  # See the dedicated \\\"issues\\\" documentation section.\\n  option: value\\nseverity:\\n  # See the dedicated \\\"severity\\\" documentation section.\\n  option: value\\n\")), mdx(\"h3\", {\n    \"id\": \"run-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#run-configuration\",\n    \"aria-label\": \"run configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"run\"), \" configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"# Options for analysis running.\\nrun:\\n  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.\\n  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.\\n  # Default: the number of logical CPUs in the machine\\n  concurrency: 4\\n  # Timeout for analysis, e.g. 30s, 5m.\\n  # Default: 1m\\n  timeout: 5m\\n  # Exit code when at least one issue was found.\\n  # Default: 1\\n  issues-exit-code: 2\\n  # Include test files or not.\\n  # Default: true\\n  tests: false\\n  # List of build tags, all linters use it.\\n  # Default: []\\n  build-tags:\\n    - mytag\\n  # If set, we pass it to \\\"go list -mod={option}\\\". From \\\"go help modules\\\":\\n  # If invoked with -mod=readonly, the go command is disallowed from the implicit\\n  # automatic updating of go.mod described above. Instead, it fails when any changes\\n  # to go.mod are needed. This setting is most useful to check that go.mod does\\n  # not need updates, such as in a continuous integration and testing system.\\n  # If invoked with -mod=vendor, the go command assumes that the vendor\\n  # directory holds the correct copies of dependencies and ignores\\n  # the dependency descriptions in go.mod.\\n  #\\n  # Allowed values: readonly|vendor|mod\\n  # Default: \\\"\\\"\\n  modules-download-mode: readonly\\n  # Allow multiple parallel golangci-lint instances running.\\n  # If false, golangci-lint acquires file lock on start.\\n  # Default: false\\n  allow-parallel-runners: true\\n  # Allow multiple golangci-lint instances running, but serialize them around a lock.\\n  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.\\n  # Default: false\\n  allow-serial-runners: true\\n  # Define the Go version limit.\\n  # Mainly related to generics support since go1.18.\\n  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17\\n  go: '1.19'\\n\")), mdx(\"h3\", {\n    \"id\": \"output-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#output-configuration\",\n    \"aria-label\": \"output configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"output\"), \" configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"# output configuration options\\noutput:\\n  # The formats used to render issues.\\n  # Formats:\\n  # - `colored-line-number`\\n  # - `line-number`\\n  # - `json`\\n  # - `colored-tab`\\n  # - `tab`\\n  # - `checkstyle`\\n  # - `code-climate`\\n  # - `junit-xml`\\n  # - `github-actions`\\n  # - `teamcity`\\n  # Output path can be either `stdout`, `stderr` or path to the file to write to.\\n  #\\n  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.\\n  # The output can be specified for each of them by separating format name and path by colon symbol.\\n  # Example: \\\"--out-format=checkstyle:report.xml,json:stdout,colored-line-number\\\"\\n  # The CLI flag (`--out-format`) override the configuration file.\\n  #\\n  # Default:\\n  #   formats:\\n  #     - format: colored-line-number\\n  #       path: stdout\\n  formats:\\n    - format: json\\n      path: stderr\\n    - format: checkstyle\\n      path: report.xml\\n    - format: colored-line-number\\n  # Print lines of code with issue.\\n  # Default: true\\n  print-issued-lines: false\\n  # Print linter name in the end of issue text.\\n  # Default: true\\n  print-linter-name: false\\n  # Make issues output unique by line.\\n  # Default: true\\n  uniq-by-line: false\\n  # Add a prefix to the output file references.\\n  # Default: \\\"\\\"\\n  path-prefix: \\\"\\\"\\n  # Sort results by the order defined in `sort-order`.\\n  # Default: false\\n  sort-results: true\\n  # Order to use when sorting results.\\n  # Require `sort-results` to `true`.\\n  # Possible values: `file`, `linter`, and `severity`.\\n  #\\n  # If the severity values are inside the following list, they are ordered in this order:\\n  #   1. error\\n  #   2. warning\\n  #   3. high\\n  #   4. medium\\n  #   5. low\\n  # Either they are sorted alphabetically.\\n  #\\n  # Default: [\\\"file\\\"]\\n  sort-order:\\n    - linter\\n    - severity\\n    - file # filepath, line, and column.\\n  # Show statistics per linter.\\n  # Default: false\\n  show-stats: true\\n\")), mdx(\"h3\", {\n    \"id\": \"linters-settings-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#linters-settings-configuration\",\n    \"aria-label\": \"linters settings configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"linters-settings\"), \" configuration\"), mdx(\"p\", null, \"See the dedicated \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/usage/linters\"\n  }, \"linters-settings\"), \" documentation section.\"), mdx(\"h3\", {\n    \"id\": \"linters-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#linters-configuration\",\n    \"aria-label\": \"linters configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"linters\"), \" configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"linters:\\n  # Disable all linters.\\n  # Default: false\\n  disable-all: true\\n  # Enable specific linter\\n  # https://golangci-lint.run/usage/linters/#enabled-by-default\\n  enable:\\n    - asasalint\\n    - asciicheck\\n    - bidichk\\n    - bodyclose\\n    - canonicalheader\\n    - containedctx\\n    - contextcheck\\n    - copyloopvar\\n    - cyclop\\n    - decorder\\n    - depguard\\n    - dogsled\\n    - dupl\\n    - dupword\\n    - durationcheck\\n    - err113\\n    - errcheck\\n    - errchkjson\\n    - errname\\n    - errorlint\\n    - execinquery\\n    - exhaustive\\n    - exhaustruct\\n    - exportloopref\\n    - fatcontext\\n    - forbidigo\\n    - forcetypeassert\\n    - funlen\\n    - gci\\n    - ginkgolinter\\n    - gocheckcompilerdirectives\\n    - gochecknoglobals\\n    - gochecknoinits\\n    - gochecksumtype\\n    - gocognit\\n    - goconst\\n    - gocritic\\n    - gocyclo\\n    - godot\\n    - godox\\n    - gofmt\\n    - gofumpt\\n    - goheader\\n    - goimports\\n    - gomoddirectives\\n    - gomodguard\\n    - goprintffuncname\\n    - gosec\\n    - gosimple\\n    - gosmopolitan\\n    - govet\\n    - grouper\\n    - importas\\n    - inamedparam\\n    - ineffassign\\n    - interfacebloat\\n    - intrange\\n    - ireturn\\n    - lll\\n    - loggercheck\\n    - maintidx\\n    - makezero\\n    - mirror\\n    - misspell\\n    - mnd\\n    - musttag\\n    - nakedret\\n    - nestif\\n    - nilerr\\n    - nilnil\\n    - nlreturn\\n    - noctx\\n    - nolintlint\\n    - nonamedreturns\\n    - nosprintfhostport\\n    - paralleltest\\n    - perfsprint\\n    - prealloc\\n    - predeclared\\n    - promlinter\\n    - protogetter\\n    - reassign\\n    - revive\\n    - rowserrcheck\\n    - sloglint\\n    - spancheck\\n    - sqlclosecheck\\n    - staticcheck\\n    - stylecheck\\n    - tagalign\\n    - tagliatelle\\n    - tenv\\n    - testableexamples\\n    - testifylint\\n    - testpackage\\n    - thelper\\n    - tparallel\\n    - typecheck\\n    - unconvert\\n    - unparam\\n    - unused\\n    - usestdlibvars\\n    - varnamelen\\n    - wastedassign\\n    - whitespace\\n    - wrapcheck\\n    - wsl\\n    - zerologlint\\n  # Enable all available linters.\\n  # Default: false\\n  enable-all: true\\n  # Disable specific linter\\n  # https://golangci-lint.run/usage/linters/#disabled-by-default\\n  disable:\\n    - asasalint\\n    - asciicheck\\n    - bidichk\\n    - bodyclose\\n    - canonicalheader\\n    - containedctx\\n    - contextcheck\\n    - copyloopvar\\n    - cyclop\\n    - decorder\\n    - depguard\\n    - dogsled\\n    - dupl\\n    - dupword\\n    - durationcheck\\n    - err113\\n    - errcheck\\n    - errchkjson\\n    - errname\\n    - errorlint\\n    - execinquery\\n    - exhaustive\\n    - exhaustruct\\n    - exportloopref\\n    - fatcontext\\n    - forbidigo\\n    - forcetypeassert\\n    - funlen\\n    - gci\\n    - ginkgolinter\\n    - gocheckcompilerdirectives\\n    - gochecknoglobals\\n    - gochecknoinits\\n    - gochecksumtype\\n    - gocognit\\n    - goconst\\n    - gocritic\\n    - gocyclo\\n    - godot\\n    - godox\\n    - gofmt\\n    - gofumpt\\n    - goheader\\n    - goimports\\n    - gomoddirectives\\n    - gomodguard\\n    - goprintffuncname\\n    - gosec\\n    - gosimple\\n    - gosmopolitan\\n    - govet\\n    - grouper\\n    - importas\\n    - inamedparam\\n    - ineffassign\\n    - interfacebloat\\n    - intrange\\n    - ireturn\\n    - lll\\n    - loggercheck\\n    - maintidx\\n    - makezero\\n    - mirror\\n    - misspell\\n    - mnd\\n    - musttag\\n    - nakedret\\n    - nestif\\n    - nilerr\\n    - nilnil\\n    - nlreturn\\n    - noctx\\n    - nolintlint\\n    - nonamedreturns\\n    - nosprintfhostport\\n    - paralleltest\\n    - perfsprint\\n    - prealloc\\n    - predeclared\\n    - promlinter\\n    - protogetter\\n    - reassign\\n    - revive\\n    - rowserrcheck\\n    - sloglint\\n    - spancheck\\n    - sqlclosecheck\\n    - staticcheck\\n    - stylecheck\\n    - tagalign\\n    - tagliatelle\\n    - tenv\\n    - testableexamples\\n    - testifylint\\n    - testpackage\\n    - thelper\\n    - tparallel\\n    - typecheck\\n    - unconvert\\n    - unparam\\n    - unused\\n    - usestdlibvars\\n    - varnamelen\\n    - wastedassign\\n    - whitespace\\n    - wrapcheck\\n    - wsl\\n    - zerologlint\\n    - deadcode # Deprecated\\n    - exhaustivestruct # Deprecated\\n    - golint # Deprecated\\n    - ifshort # Deprecated\\n    - interfacer # Deprecated\\n    - maligned # Deprecated\\n    - gomnd # Deprecated\\n    - nosnakecase # Deprecated\\n    - scopelint # Deprecated\\n    - structcheck # Deprecated\\n    - varcheck # Deprecated\\n  # Enable presets.\\n  # https://golangci-lint.run/usage/linters\\n  # Default: []\\n  presets:\\n    - bugs\\n    - comment\\n    - complexity\\n    - error\\n    - format\\n    - import\\n    - metalinter\\n    - module\\n    - performance\\n    - sql\\n    - style\\n    - test\\n    - unused\\n  # Enable only fast linters from enabled linters set (first run won't be fast)\\n  # Default: false\\n  fast: true\\n\")), mdx(\"h3\", {\n    \"id\": \"issues-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#issues-configuration\",\n    \"aria-label\": \"issues configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"issues\"), \" configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"issues:\\n  # List of regexps of issue texts to exclude.\\n  #\\n  # But independently of this option we use default exclude patterns,\\n  # it can be disabled by `exclude-use-default: false`.\\n  # To list all excluded by default patterns execute `golangci-lint run --help`\\n  #\\n  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions\\n  exclude:\\n    - abcdef\\n  # Excluding configuration per-path, per-linter, per-text and per-source\\n  exclude-rules:\\n    # Exclude some linters from running on tests files.\\n    - path: _test\\\\.go\\n      linters:\\n        - gocyclo\\n        - errcheck\\n        - dupl\\n        - gosec\\n    # Run some linter only for test files by excluding its issues for everything else.\\n    - path-except: _test\\\\.go\\n      linters:\\n        - forbidigo\\n    # Exclude known linters from partially hard-vendored code,\\n    # which is impossible to exclude via `nolint` comments.\\n    # `/` will be replaced by current OS file path separator to properly work on Windows.\\n    - path: internal/hmac/\\n      text: \\\"weak cryptographic primitive\\\"\\n      linters:\\n        - gosec\\n    # Exclude some `staticcheck` messages.\\n    - linters:\\n        - staticcheck\\n      text: \\\"SA9003:\\\"\\n    # Exclude `lll` issues for long lines with `go:generate`.\\n    - linters:\\n        - lll\\n      source: \\\"^//go:generate \\\"\\n  # Independently of option `exclude` we use default exclude patterns,\\n  # it can be disabled by this option.\\n  # To list all excluded by default patterns execute `golangci-lint run --help`.\\n  # Default: true\\n  exclude-use-default: false\\n  # If set to true, `exclude` and `exclude-rules` regular expressions become case-sensitive.\\n  # Default: false\\n  exclude-case-sensitive: false\\n  # Which dirs to exclude: issues from them won't be reported.\\n  # Can use regexp here: `generated.*`, regexp is applied on full path,\\n  # including the path prefix if one is set.\\n  # Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).\\n  # \\\"/\\\" will be replaced by current OS file path separator to properly work on Windows.\\n  # Default: []\\n  exclude-dirs:\\n    - src/external_libs\\n    - autogenerated_by_my_lib\\n  # Enables exclude of directories:\\n  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$\\n  # Default: true\\n  exclude-dirs-use-default: false\\n  # Which files to exclude: they will be analyzed, but issues from them won't be reported.\\n  # There is no need to include all autogenerated files,\\n  # we confidently recognize autogenerated files.\\n  # If it's not, please let us know.\\n  # \\\"/\\\" will be replaced by current OS file path separator to properly work on Windows.\\n  # Default: []\\n  exclude-files:\\n    - \\\".*\\\\\\\\.my\\\\\\\\.go$\\\"\\n    - lib/bad.go\\n  # To follow strictly the Go generated file convention.\\n  #\\n  # If set to true, source files that have lines matching only the following regular expression will be excluded:\\n  #   `^// Code generated .* DO NOT EDIT\\\\.$`\\n  # This line must appear before the first non-comment, non-blank text in the file.\\n  # https://go.dev/s/generatedcode\\n  #\\n  # By default, a lax pattern is applied:\\n  # sources are excluded if they contain lines `autogenerated file`, `code generated`, `do not edit`, etc.\\n  # Default: false\\n  exclude-generated-strict: true\\n  # The list of ids of default excludes to include or disable.\\n  # https://golangci-lint.run/usage/false-positives/#default-exclusions\\n  # Default: []\\n  include:\\n    - EXC0001\\n    - EXC0002\\n    - EXC0003\\n    - EXC0004\\n    - EXC0005\\n    - EXC0006\\n    - EXC0007\\n    - EXC0008\\n    - EXC0009\\n    - EXC0010\\n    - EXC0011\\n    - EXC0012\\n    - EXC0013\\n    - EXC0014\\n    - EXC0015\\n  # Maximum issues count per one linter.\\n  # Set to 0 to disable.\\n  # Default: 50\\n  max-issues-per-linter: 0\\n  # Maximum count of issues with the same text.\\n  # Set to 0 to disable.\\n  # Default: 3\\n  max-same-issues: 0\\n  # Show only new issues: if there are unstaged changes or untracked files,\\n  # only those changes are analyzed, else only changes in HEAD~ are analyzed.\\n  # It's a super-useful option for integration of golangci-lint into existing large codebase.\\n  # It's not practical to fix all existing issues at the moment of integration:\\n  # much better don't allow issues in new code.\\n  #\\n  # Default: false\\n  new: true\\n  # Show only new issues created after git revision `REV`.\\n  # Default: \\\"\\\"\\n  new-from-rev: HEAD\\n  # Show only new issues created in git patch with set file path.\\n  # Default: \\\"\\\"\\n  new-from-patch: path/to/patch/file\\n  # Fix found issues (if it's supported by the linter).\\n  # Default: false\\n  fix: true\\n  # Show issues in any part of update files (requires new-from-rev or new-from-patch).\\n  # Default: false\\n  whole-files: true\\n\")), mdx(\"h3\", {\n    \"id\": \"severity-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#severity-configuration\",\n    \"aria-label\": \"severity configuration permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"severity\"), \" configuration\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"severity:\\n  # Set the default severity for issues.\\n  #\\n  # If severity rules are defined and the issues do not match or no severity is provided to the rule\\n  # this will be the default severity applied.\\n  # Severities should match the supported severity names of the selected out format.\\n  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity\\n  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel\\n  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message\\n  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance\\n  #\\n  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)\\n  #\\n  # Default: \\\"\\\"\\n  default-severity: error\\n  # If set to true `severity-rules` regular expressions become case-sensitive.\\n  # Default: false\\n  case-sensitive: true\\n  # When a list of severity rules are provided, severity information will be added to lint issues.\\n  # Severity rules have the same filtering capability as exclude rules\\n  # except you are allowed to specify one matcher per severity rule.\\n  #\\n  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)\\n  #\\n  # Only affects out formats that support setting severity information.\\n  #\\n  # Default: []\\n  rules:\\n    - linters:\\n        - dupl\\n      severity: info\\n\")), mdx(\"h2\", {\n    \"id\": \"command-line-options\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#command-line-options\",\n    \"aria-label\": \"command line options permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Command-Line Options\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint run -h\\nUsage:\\n  golangci-lint run [flags]\\n\\nFlags:\\n  -c, --config PATH                    Read config from file path PATH\\n      --no-config                      Don't read config file\\n  -D, --disable strings                Disable specific linter\\n      --disable-all                    Disable all linters\\n  -E, --enable strings                 Enable specific linter\\n      --enable-all                     Enable all linters\\n      --fast                           Enable only fast linters from enabled linters set (first run won't be fast)\\n  -p, --presets strings                Enable presets (bugs|comment|complexity|error|format|import|metalinter|module|performance|sql|style|test|unused) of linters.\\n                                       Run 'golangci-lint help linters' to see them.\\n                                       This option implies option --disable-all\\n      --enable-only strings            Override linters configuration section to only run the specific linter(s)\\n  -j, --concurrency int                Number of CPUs to use (Default: number of logical CPUs) (default 8)\\n      --modules-download-mode string   Modules download mode. If not empty, passed as -mod=<mode> to go tools\\n      --issues-exit-code int           Exit code when issues were found (default 1)\\n      --go string                      Targeted Go version\\n      --build-tags strings             Build tags\\n      --timeout duration               Timeout for total work (default 1m0s)\\n      --tests                          Analyze tests (*_test.go) (default true)\\n      --allow-parallel-runners         Allow multiple parallel golangci-lint instances running.\\n                                       If false (default) - golangci-lint acquires file lock on start.\\n      --allow-serial-runners           Allow multiple golangci-lint instances running, but serialize them around a lock.\\n                                       If false (default) - golangci-lint exits with an error if it fails to acquire file lock on start.\\n      --out-format string              Formats of output: json|line-number|colored-line-number|tab|colored-tab|checkstyle|code-climate|html|junit-xml|github-actions|teamcity (default \\\"colored-line-number\\\")\\n      --print-issued-lines             Print lines of code with issue (default true)\\n      --print-linter-name              Print linter name in issue line (default true)\\n      --uniq-by-line                   Make issues output unique by line (default true)\\n      --sort-results                   Sort linter results\\n      --sort-order strings             Sort order of linter results\\n      --path-prefix string             Path prefix to add to output\\n      --show-stats                     Show statistics per linter\\n  -e, --exclude strings                Exclude issue by regexp\\n      --exclude-use-default            Use or not use default excludes:\\n                                         - EXC0001 (errcheck): Almost all programs ignore errors on these functions and in most cases it's ok.\\n                                           Pattern: 'Error return value of .((os\\\\.)?std(out|err)\\\\..*|.*Close|.*Flush|os\\\\.Remove(All)?|.*print(f|ln)?|os\\\\.(Un)?Setenv). is not checked'\\n                                         - EXC0002 (golint): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: '(comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)'\\n                                         - EXC0003 (golint): False positive when tests are defined in package 'test'.\\n                                           Pattern: 'func name will be used as test\\\\.Test.* by other packages, and that stutters; consider calling this'\\n                                         - EXC0004 (govet): Common false positives.\\n                                           Pattern: '(possible misuse of unsafe.Pointer|should have signature)'\\n                                         - EXC0005 (staticcheck): Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore.\\n                                           Pattern: 'SA4011'\\n                                         - EXC0006 (gosec): Too many false-positives on 'unsafe' usage.\\n                                           Pattern: 'G103: Use of unsafe calls should be audited'\\n                                         - EXC0007 (gosec): Too many false-positives for parametrized shell calls.\\n                                           Pattern: 'G204: Subprocess launched with variable'\\n                                         - EXC0008 (gosec): Duplicated errcheck checks.\\n                                           Pattern: 'G104'\\n                                         - EXC0009 (gosec): Too many issues in popular repos.\\n                                           Pattern: '(G301|G302|G307): Expect (directory permissions to be 0750|file permissions to be 0600) or less'\\n                                         - EXC0010 (gosec): False positive is triggered by 'src, err := ioutil.ReadFile(filename)'.\\n                                           Pattern: 'G304: Potential file inclusion via variable'\\n                                         - EXC0011 (stylecheck): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: '(ST1000|ST1020|ST1021|ST1022)'\\n                                         - EXC0012 (revive): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: 'exported (.+) should have comment( \\\\(or a comment on this block\\\\))? or be unexported'\\n                                         - EXC0013 (revive): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: 'package comment should be of the form \\\"(.+)...\\\"'\\n                                         - EXC0014 (revive): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: 'comment on exported (.+) should be of the form \\\"(.+)...\\\"'\\n                                         - EXC0015 (revive): Annoying issue about not having a comment. The rare codebase has such comments.\\n                                           Pattern: 'should have a package comment' (default true)\\n      --exclude-case-sensitive         If set to true exclude and exclude rules regular expressions are case-sensitive\\n      --max-issues-per-linter int      Maximum issues count per one linter. Set to 0 to disable (default 50)\\n      --max-same-issues int            Maximum count of issues with the same text. Set to 0 to disable (default 3)\\n      --exclude-files strings          Regexps of files to exclude\\n      --exclude-dirs strings           Regexps of directories to exclude\\n      --exclude-dirs-use-default       Use or not use default excluded directories:\\n                                         - (^|/)vendor($|/)\\n                                         - (^|/)third_party($|/)\\n                                         - (^|/)testdata($|/)\\n                                         - (^|/)examples($|/)\\n                                         - (^|/)Godeps($|/)\\n                                         - (^|/)builtin($|/)\\n                                        (default true)\\n  -n, --new                            Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only changes in HEAD~ are analyzed.\\n                                       It's a super-useful option for integration of golangci-lint into existing large codebase.\\n                                       It's not practical to fix all existing issues at the moment of integration: much better to not allow issues in new code.\\n                                       For CI setups, prefer --new-from-rev=HEAD~, as --new can skip linting the current patch if any scripts generate unstaged files before golangci-lint runs.\\n      --new-from-rev REV               Show only new issues created after git revision REV\\n      --new-from-patch PATH            Show only new issues created in git patch with file path PATH\\n      --whole-files                    Show issues in any part of update files (requires new-from-rev or new-from-patch)\\n      --fix                            Fix found issues (if it's supported by the linter)\\n      --cpu-profile-path string        Path to CPU profile output file\\n      --mem-profile-path string        Path to memory profile output file\\n      --print-resources-usage          Print avg and max memory usage of golangci-lint and total time\\n      --trace-path string              Path to trace output file\\n\\nGlobal Flags:\\n      --color string   Use color when printing; can be 'always', 'auto', or 'never' (default \\\"auto\\\")\\n  -h, --help           Help for a command\\n  -v, --verbose        Verbose output\\n\\n\")), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--cpu-profile-path\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--mem-profile-path\"), \" arguments are specified, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"golangci-lint\"), \" writes runtime profiling data\\nin the format expected by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/google/pprof\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"pprof\"), \" visualization tool.\"), mdx(\"p\", null, \"When the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--trace-path\"), \" argument is specified, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"golangci-lint\"), \" writes runtime tracing data in the format expected by\\nthe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"go tool trace\"), \" command and visualization tool.\"), mdx(\"h2\", {\n    \"id\": \"cache\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#cache\",\n    \"aria-label\": \"cache permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Cache\"), mdx(\"p\", null, \"GolangCI-Lint stores its cache in the subdirectory \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"golangci-lint\"), \" inside the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://pkg.go.dev/os#UserCacheDir\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow noopener noreferrer\"\n  }, \"default user cache directory\"), \".\"), mdx(\"p\", null, \"You can override the default cache directory with the environment variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GOLANGCI_LINT_CACHE\"), \"; the path must be absolute.\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Config File"},{"depth":3,"value":"run configuration"},{"depth":3,"value":"output configuration"},{"depth":3,"value":"linters-settings configuration"},{"depth":3,"value":"linters configuration"},{"depth":3,"value":"issues configuration"},{"depth":3,"value":"severity configuration"},{"depth":2,"value":"Command-Line Options"},{"depth":2,"value":"Cache"}]}},"pageContext":{"slug":"/usage/configuration/","prev":{"label":"FAQ","link":"/welcome/faq/"},"next":{"label":"Linters","link":"/usage/linters/"},"githubEditUrl":"https://github.com/golangci/golangci-lint/tree/master/docs/src/docs/usage/configuration.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}