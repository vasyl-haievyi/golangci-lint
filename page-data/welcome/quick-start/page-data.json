{"componentChunkName":"component---src-rocketseat-gatsby-theme-docs-src-templates-docs-query-js","path":"/welcome/quick-start/","result":{"data":{"mdx":{"id":"a50c397b-3bab-503b-bb6e-17c6a661483b","excerpt":"To run golangci-lint execute: It's an equivalent of executing: You can choose which directories or files to analyze: Directories are NOT analyzed recursivelyâ€¦","fields":{"slug":"/welcome/quick-start/"},"frontmatter":{"title":"Quick Start","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Quick Start\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To run golangci-lint execute:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint run\\n\")), mdx(\"p\", null, \"It's an equivalent of executing:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint run ./...\\n\")), mdx(\"p\", null, \"You can choose which directories or files to analyze:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint run dir1 dir2/...\\ngolangci-lint run file1.go\\n\")), mdx(\"p\", null, \"Directories are NOT analyzed recursively.\\nTo analyze them recursively append \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/...\"), \" to their path.\\nIt's not possible to mix files and packages/directories, and files must come from the same package.\"), mdx(\"p\", null, \"GolangCI-Lint can be used with zero configuration. By default, the following linters are enabled:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ golangci-lint help linters\\nEnabled by default linters:\\nerrcheck: errcheck is a program for checking for unchecked errors in Go code. These unchecked errors can be critical bugs in some cases [fast: false, auto-fix: false]\\ngosimple: Linter for Go source code that specializes in simplifying code [fast: false, auto-fix: false]\\ngovet: Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes. [fast: false, auto-fix: false]\\nineffassign: Detects when assignments to existing variables are not used [fast: true, auto-fix: false]\\nstaticcheck: It's a set of rules from staticcheck. It's not the same thing as the staticcheck binary. The author of staticcheck doesn't support or approve the use of staticcheck as a library inside golangci-lint. [fast: false, auto-fix: false]\\nunused: Checks Go code for unused constants, variables, functions and types [fast: false, auto-fix: false]\\n\")), mdx(\"p\", null, \"Pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-E/--enable\"), \" to enable linter and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-D/--disable\"), \" to disable:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"golangci-lint run --disable-all -E errcheck\\n\")), mdx(\"p\", null, \"More information about available linters can be found in the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/usage/linters/\"\n  }, \"linters page\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[]}},"pageContext":{"slug":"/welcome/quick-start/","prev":{"label":"Install","link":"/welcome/install/"},"next":{"label":"Integrations","link":"/welcome/integrations/"},"githubEditUrl":"https://github.com/golangci/golangci-lint/tree/master/docs/src/docs/welcome/quick-start.mdx"}},"staticQueryHashes":["1954253342","2360221584","2501019404","2679457992"]}